<?xml version="1.0" encoding="UTF-8"?>
<project name="WebLab3" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <!-- Подключение файла с параметрами -->
    <property file="properties.xml"/>

    <!-- Определение путей к директориям -->
    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>
    
    <!-- Подключение библиотеки ant-contrib для for цикла -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${lib.dir}/ant-contrib-1.0b3.jar"/>

    <!-- Подготовка директорий -->
    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${report.dir}"/>
    </target>

    <!-- Компиляция исходных кодов проекта -->
    <target name="compile" depends="init" description="Компиляция исходных кодов проекта">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false">
            <classpath refid="classpath"/>
        </javac>
    </target>

    <!-- Компиляция и упаковка в исполняемый war-архив -->
    <target name="build" depends="compile" description="Компиляция исходных кодов проекта и их упаковка в исполняемый war-архив">
        <war destfile="${dist.dir}/${war.name}" webxml="${webapp.dir}/WEB-INF/web.xml">
            <classes dir="${classes.dir}"/>
            <fileset dir="${webapp.dir}" excludes="WEB-INF/web.xml"/>
            <manifest>
                <attribute name="Implementation-Title" value="WebLab3"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Built-By" value="${user.name}"/>
            </manifest>
        </war>
    </target>

    <!-- Удаление скомпилированных классов и временных файлов -->
    <target name="clean" description="Удаление скомпилированных классов проекта и всех временных файлов">
        <delete dir="${build.dir}"/>
        <delete dir="${report.dir}"/>
    </target>

    <!-- Запуск JUnit-тестов -->
    <target name="test" depends="build" description="Запуск junit-тестов проекта">
        <mkdir dir="${report.dir}"/>
        <junit printsummary="yes" haltonfailure="no" fork="true">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}">
                <fileset dir="${test.dir}" includes="**/*Test.java"/>
            </batchtest>
        </junit>
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}" includes="TEST-*.xml"/>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>
    </target>

    <!-- Валидация XML-файлов -->
    <target name="xml" description="Валидация всех xml-файлов в проекте">
        <xmlvalidate lenient="yes">
            <fileset dir="${src.dir}" includes="**/*.xml"/>
            <fileset dir="${webapp.dir}" includes="**/*.xml"/>
        </xmlvalidate>
    </target>

    <!-- Генерация JavaDoc -->
    <target name="doc" depends="build" description="Добавление в MANIFEST.MF MD5 и SHA-1 файлов проекта, а также генерация и добавление в архив javadoc">
        <javadoc sourcepath="${src.dir}" destdir="${doc.dir}" 
                 author="true" version="true" use="true" 
                 windowtitle="${ant.project.name} API">
            <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; ${year} ${organization}. All Rights Reserved.</i>]]></bottom>
            <classpath refid="classpath"/>
        </javadoc>
        
        <!-- Вычисление MD5 и SHA-1 хешей -->
        <checksum file="${dist.dir}/${war.name}" algorithm="MD5" property="md5.actual"/>
        <checksum file="${dist.dir}/${war.name}" algorithm="SHA-1" property="sha1.actual"/>
        <echo message="MD5: ${md5.actual}"/>
        <echo message="SHA-1: ${sha1.actual}"/>
        
        <war destfile="${dist.dir}/${war.name}" update="true">
            <zipfileset dir="${doc.dir}" prefix="WEB-INF/docs"/>
            <manifest>
                <attribute name="MD5-Digest" value="${md5.actual}"/>
                <attribute name="SHA1-Digest" value="${sha1.actual}"/>
            </manifest>
        </war>
    </target>

    <!-- Копирование файлов локализации -->
    <target name="native2ascii" description="Преобразование native2ascii для копий файлов локализации">
        <mkdir dir="${native.dir}"/>
        <native2ascii src="${i18n.dir}" dest="${native.dir}" 
                      includes="**/*.properties" encoding="UTF-8"/>
    </target>

    <!-- Перемещение собранного проекта на сервер -->
    <target name="scp" depends="build" description="Перемещение собранного проекта по scp на выбранный сервер">
        <scp file="${dist.dir}/${war.name}" 
             todir="${scp.user}@${scp.host}:${scp.dir}" 
             password="${scp.password}" 
             trust="true"/>
    </target>

    <!-- Воспроизведение музыки по завершению сборки -->
    <target name="music" depends="build">
        <sound>
            <success source="${success.sound}"/>
        </sound>
    </target>

    <!-- Создание отчета о прохождении тестов -->
    <target name="report" depends="test" description="В случае успешного прохождения тестов сохраняет отчет junit в формате xml">
        <mkdir dir="${report.dir}/git"/>
        
        <!-- Получаем текущую ревизию Git -->
        <exec executable="git" outputproperty="git.revision">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        
        <!-- Сохраняем информацию о ревизии -->
        <echo file="${report.dir}/git-revision.txt">${git.revision}</echo>
        
        <echo message="Текущая ревизия Git: ${git.revision}"/>
        <echo message="Отчет о тестировании сохранен в: ${report.dir}"/>
        
        <!-- Добавляем отчеты в Git -->
        <exec executable="git">
            <arg value="add"/>
            <arg value="${report.dir}"/>
        </exec>
        
        <!-- Создаем коммит с отчетами -->
        <exec executable="git">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Test report for revision ${git.revision}"/>
        </exec>
    </target>

    <!-- История версий -->
    <target name="history" description="Если проект не удаётся скомпилировать, загружается предыдущая версия из репозитория svn">
        <property name="history.success" value="false"/>
        <property name="history.attempts" value="0"/>
        <property name="max.attempts" value="5"/>
        
        <trycatch property="compile.error" reference="stack.trace">
            <try>
                <antcall target="compile"/>
                <property name="history.success" value="true"/>
            </try>
            <catch>
                <echo message="Компиляция не удалась. Пытаемся загрузить предыдущую версию..."/>
                
                <for param="attempt" list="1,2,3,4,5" delimiter=",">
                    <sequential>
                        <if>
                            <and>
                                <not><equals arg1="${history.success}" arg2="true"/></not>
                                <not><equals arg1="${history.attempts}" arg2="${max.attempts}"/></not>
                            </and>
                            <then>
                                <echo message="Попытка @{attempt}: Откат на предыдущую версию"/>
                                <math result="history.attempts" operand1="${history.attempts}" operation="+" operand2="1" datatype="int"/>

                                <!-- Используем Git вместо SVN, так как у нас Git-репозиторий -->
                                <exec executable="git" outputproperty="current.revision">
                                    <arg value="rev-parse"/>
                                    <arg value="HEAD"/>
                                </exec>
                                
                                <echo message="Текущая ревизия: ${current.revision}"/>
                                <exec executable="git">
                                    <arg value="checkout"/>
                                    <arg value="HEAD~1"/>
                                </exec>
                                
                                <trycatch>
                                    <try>
                                        <antcall target="compile"/>
                                        <property name="history.success" value="true"/>
                                        <echo message="Компиляция успешна с предыдущей версией"/>
                                        <exec executable="git" output="${report.dir}/diff.txt">
                                            <arg value="diff"/>
                                            <arg value="${current.revision}"/>
                                        </exec>
                                    </try>
                                    <catch>
                                        <echo message="Компиляция не удалась и с предыдущей версией"/>
                                    </catch>
                                </trycatch>
                            </then>
                        </if>
                    </sequential>
                </for>
                
                <if>
                    <equals arg1="${history.success}" arg2="true"/>
                    <then>
                        <echo message="Найдена рабочая версия. Результат операции diff сохранен в ${report.dir}/diff.txt"/>
                    </then>
                    <else>
                        <echo message="Не удалось найти рабочую версию после ${max.attempts} попыток"/>
                        <exec executable="git">
                            <arg value="checkout"/>
                            <arg value="main"/>
                        </exec>
                    </else>
                </if>
            </catch>
        </trycatch>
    </target>

    <!-- Создание альтернативной версии -->
    <target name="alt" description="Создаёт альтернативную версию программы с измененными именами переменных и классов">
        <copy todir="${alt.dir}">
            <fileset dir="${src.dir}"/>
        </copy>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.MainBean"/>
            <substitution expression="org.example.weblab3.AltMainBean"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.ClockBean"/>
            <substitution expression="org.example.weblab3.AltClockBean"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.PointResult"/>
            <substitution expression="org.example.weblab3.AltPointResult"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.PointResultDAO"/>
            <substitution expression="org.example.weblab3.AltPointResultDAO"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.ResultManager"/>
            <substitution expression="org.example.weblab3.AltResultManager"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bx\b"/>
            <substitution expression="altX"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\by\b"/>
            <substitution expression="altY"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\br\b"/>
            <substitution expression="altR"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bresult\b"/>
            <substitution expression="altResult"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bpoint\b"/>
            <substitution expression="altPoint"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bclock\b"/>
            <substitution expression="altClock"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bmanager\b"/>
            <substitution expression="altManager"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <antcall target="build">
            <param name="src.dir" value="${alt.dir}"/>
            <param name="war.name" value="${alt.war.name}"/>
        </antcall>
    </target>

    <!-- Проверка изменений кода -->
    <target name="diff" description="Осуществляет проверку состояния рабочей копии">
        <!-- Получаем статус изменений -->
        <exec executable="git" outputproperty="git.status">
            <arg value="status"/>
            <arg value="--porcelain"/>
        </exec>
        
        <!-- Получаем текущую ревизию -->
        <exec executable="git" outputproperty="git.revision">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        
        <echo message="Текущая ревизия: ${git.revision}"/>
        
        <!-- Создаем diff-файл -->
        <exec executable="git" output="${report.dir}/current-diff.txt">
            <arg value="diff"/>
        </exec>
        
        <!-- Проверяем, есть ли изменения -->
        <condition property="changes.exist">
            <not>
                <equals arg1="${git.status}" arg2=""/>
            </not>
        </condition>
        
        <echo message="Статус изменений: ${git.status}"/>
        
        <!-- Если есть изменения, предлагаем сделать коммит -->
        <antcall target="commit-changes"/>
    </target>
    
    <!-- Вспомогательная цель для коммита изменений -->
    <target name="commit-changes" if="changes.exist">
        <input message="Введите комментарий для коммита:" addproperty="commit.message"/>
        <exec executable="git">
            <arg value="add"/>
            <arg value="."/>
        </exec>
        <exec executable="git">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="${commit.message}"/>
        </exec>
        <echo message="Изменения успешно закоммичены."/>
    </target>

    <!-- Локальный запуск WAR-архива через встроенный Tomcat -->
    <target name="run-local" depends="build" description="Запускает WAR-архив на встроенном Tomcat сервере">
        <echo message="Запуск локального Tomcat сервера..."/>
        <echo message="Для завершения нажмите Ctrl+C"/>
        
        <java classname="org.apache.catalina.startup.Bootstrap" fork="true">
            <classpath>
                <fileset dir="${lib.dir}/tomcat" includes="*.jar"/>
            </classpath>
            <jvmarg value="-Djava.version=${java.version}"/>
            <jvmarg value="-Duser.language=${user.language}"/>
            <jvmarg value="-Dcatalina.base=${basedir}/temp"/>
            <jvmarg value="-Dcatalina.home=${basedir}/temp"/>
            <arg value="start"/>
            <sysproperty key="catalina.base" value="${basedir}/temp"/>
            <sysproperty key="catalina.home" value="${basedir}/temp"/>
            <sysproperty key="war.path" value="${dist.dir}/${war.name}"/>
        </java>
        
        <!-- Создаем папку для данных Tomcat -->
        <mkdir dir="${basedir}/temp/webapps"/>
        <copy file="${dist.dir}/${war.name}" todir="${basedir}/temp/webapps"/>
        
        <echo message="Приложение будет доступно по адресу: http://localhost:8080/WebLab3"/>
    </target>
    
    <!-- Сборка и запуск в альтернативном окружении -->
    <target name="env" depends="build" description="Осуществляет сборку и запуск программы в альтернативных окружениях">
        <echo message="Выберите окружение для запуска:"/>
        <echo message="1. Локальный Tomcat (ant run-local)"/>
        <echo message="2. Удаленный сервер (ant scp)"/>
        
        <input message="Введите номер (1 или 2):" validargs="1,2" addproperty="env.choice"/>
        
        <condition property="run.local">
            <equals arg1="${env.choice}" arg2="1"/>
        </condition>
        
        <condition property="run.remote">
            <equals arg1="${env.choice}" arg2="2"/>
        </condition>
        
        <antcall target="do-run-local"/>
        <antcall target="do-run-remote"/>
    </target>
    
    <target name="do-run-local" if="run.local">
        <antcall target="run-local"/>
    </target>
    
    <target name="do-run-remote" if="run.remote">
        <antcall target="scp"/>
        <echo message="Приложение успешно отправлено на сервер ${scp.host}"/>
        <echo message="Доступно по адресу: http://${scp.host}:8080/WebLab3/"/>
    </target>

    <!-- Получение из git-репозитория и упаковка в zip-архив -->
    <target name="team" description="Осуществляет получение из git-репозитория 4 предыдущих ревизий и их упаковку">
        <mkdir dir="${git.dir}"/>
        
        <!-- Копируем текущий .git каталог во временную директорию -->
        <copy todir="${git.dir}/.git">
            <fileset dir=".git"/>
        </copy>
        
        <!-- Получаем список последних 4 ревизий -->
        <exec executable="git" outputproperty="git.revisions" dir="${basedir}">
            <arg value="log"/>
            <arg value="-n"/>
            <arg value="4"/>
            <arg value="--format=%H"/>
        </exec>
        
        <echo message="Найдены ревизии: ${git.revisions}"/>
        <echo file="${git.dir}/revisions.txt">${git.revisions}</echo>
        
        <!-- Для каждой ревизии создаем отдельную директорию -->
        <for list="${git.revisions}" param="revision" delimiter="${line.separator}">
            <sequential>
                <echo message="Обрабатываем ревизию: @{revision}"/>
                
                <mkdir dir="${git.dir}/rev-@{revision}"/>
                
                <!-- Клонируем основной репозиторий -->
                <exec executable="git" dir="${git.dir}/rev-@{revision}">
                    <arg value="init"/>
                </exec>
                
                <copy todir="${git.dir}/rev-@{revision}/.git">
                    <fileset dir="${git.dir}/.git"/>
                </copy>
                
                <!-- Переключаемся на нужную ревизию -->
                <exec executable="git" dir="${git.dir}/rev-@{revision}">
                    <arg value="checkout"/>
                    <arg value="@{revision}"/>
                    <arg value="--force"/>
                </exec>
                
                <!-- Собираем WAR-архив для этой ревизии -->
                <ant dir="${git.dir}/rev-@{revision}" target="build" inheritAll="false">
                    <property name="dist.dir" value="${git.dir}/rev-@{revision}/dist"/>
                </ant>
            </sequential>
        </for>
        
        <!-- Упаковываем все WAR-файлы в один ZIP-архив -->
        <mkdir dir="${dist.dir}"/>
        <zip destfile="${dist.dir}/${zip.name}">
            <fileset dir="${git.dir}" includes="**/dist/*.war"/>
        </zip>
        
        <echo message="Создан архив ${zip.name} с WAR-файлами из 4 последних ревизий"/>
    </target>
</project> 