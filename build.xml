<?xml version="1.0" encoding="UTF-8"?>
<project name="WebLab3" default="build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property file="properties.xml"/>
    <path id="classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${lib.dir}/ant-contrib-1.0b3.jar"/>

    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${report.dir}"/>
    </target>

    <target name="compile" depends="init" description="Компиляция исходных кодов проекта">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false">
            <classpath refid="classpath"/>
        </javac>
    </target>

    <target name="build" depends="compile" description="Компиляция исходных кодов проекта и их упаковка в исполняемый war-архив">
        <war destfile="${dist.dir}/${war.name}" webxml="${webapp.dir}/WEB-INF/web.xml">
            <classes dir="${classes.dir}"/>
            <fileset dir="${webapp.dir}" excludes="WEB-INF/web.xml"/>
            <lib dir="lib"/>
            <manifest>
                <attribute name="Implementation-Title" value="WebLab3"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Built-By" value="${user.name}"/>
            </manifest>
        </war>
    </target>

    <target name="clean" description="Удаление скомпилированных классов проекта и всех временных файлов">
        <delete dir="${build.dir}"/>
        <delete dir="${report.dir}"/>
    </target>

    <target name="test" depends="build" description="Запуск junit-тестов проекта">
        <mkdir dir="${report.dir}"/>
        <junit printsummary="yes" haltonfailure="no" fork="true">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${classes.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest todir="${report.dir}">
                <fileset dir="${test.dir}" includes="**/*Test.java"/>
            </batchtest>
        </junit>
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}" includes="TEST-*.xml"/>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>
    </target>

    <target name="xml" description="Валидация всех xml-файлов в проекте">
        <xmlvalidate lenient="yes">
            <fileset dir="${src.dir}" includes="**/*.xml"/>
            <fileset dir="${webapp.dir}" includes="**/*.xml"/>
        </xmlvalidate>
    </target>

    <target name="doc" depends="build" description="Добавление в MANIFEST.MF MD5 и SHA-1 файлов проекта, а также генерация и добавление в архив javadoc">
        <javadoc sourcepath="${src.dir}" destdir="${doc.dir}" 
                 author="true" version="true" use="true" 
                 windowtitle="${ant.project.name} API">
            <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169. All Rights Reserved.</i>]]></bottom>
            <classpath refid="classpath"/>
        </javadoc>

        <checksum file="${dist.dir}/${war.name}" algorithm="MD5" property="md5.actual"/>
        <checksum file="${dist.dir}/${war.name}" algorithm="SHA-1" property="sha1.actual"/>
        <echo message="MD5: ${md5.actual}"/>
        <echo message="SHA-1: ${sha1.actual}"/>
    </target>

    <target name="native2ascii" description="Преобразование native2ascii для копий файлов локализации">
        <mkdir dir="${native.dir}"/>
        <native2ascii src="${i18n.dir}" dest="${native.dir}" 
                      includes="**/*.properties" encoding="UTF-8"/>
    </target>

    <target name="scp" depends="build" description="Перемещение собранного проекта по scp на выбранный сервер">
        <scp file="${dist.dir}/${war.name}" 
             todir="${scp.user}@${scp.host}:${scp.dir}" 
             password="${scp.password}" 
             trust="true"/>
    </target>

    <target name="music" depends="build">
        <sound>
            <success source="${success.sound}"/>
        </sound>
    </target>

    <target name="report" depends="test" description="В случае успешного прохождения тестов сохраняет отчет junit в формате xml">
        <exec executable="git" outputproperty="git.revision">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        <echo file="${report.dir}/git-revision.txt">${git.revision}</echo>
        <echo message="Текущая ревизия Git: ${git.revision}"/>
        <echo message="Отчет о тестировании сохранен в: ${report.dir}"/>
        <exec executable="git">
            <arg value="add"/>
            <arg value="${report.dir}"/>
        </exec>
        <exec executable="git">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Test report for revision ${git.revision}"/>
        </exec>
    </target>

    <target name="history" description="Откат к рабочей версии с самого начала истории проекта">
        <property name="history.success" value="false"/>
        <property name="first.revision.reached" value="false"/>
        <exec executable="svn" outputproperty="current.revision">
            <arg value="info"/>
        </exec>
        <propertyregex property="current.revision.number" input="${current.revision}" regexp="Revision: ([0-9]+)" select="\1"/>
        <property name="original.revision.number" value="${current.revision.number}"/>
        <while>
            <condition>
                <and>
                    <not><equals arg1="${history.success}" arg2="true"/></not>
                    <not><equals arg1="${first.revision.reached}" arg2="true"/></not>
                </and>
            </condition>
            <sequential>
                <trycatch>
                    <try>
                        <antcall target="compile"/>
                        <property name="history.success" value="true"/>
                    </try>
                    <catch>
                        <echo message="Сборка не удалась. Откатываемся..."/>
                        <exec executable="svn" outputproperty="svn.info">
                            <arg value="info"/>
                        </exec>
                        <propertyregex property="current.revision.number" input="${svn.info}" regexp="Revision: ([0-9]+)" select="\1"/>
                        <if>
                            <equals arg1="${current.revision.number}" arg2="1"/>
                            <then>
                                <echo message="Достигнута самая первая ревизия (${current.revision.number})"/>
                                <property name="first.revision.reached" value="true"/>
                            </then>
                            <else>
                                <exec executable="svn">
                                    <arg value="update"/>
                                    <arg value="-r"/>
                                    <arg value="PREV"/>
                                </exec>
                            </else>
                        </if>
                    </catch>
                </trycatch>
            </sequential>
        </while>

        <if>
            <equals arg1="${history.success}" arg2="true"/>
            <then>
                <math result="next.revision" operand1="${current.revision.number}" operation="+" operand2="1" datatype="int"/>
                <echo message="Рабочая версия найдена в ревизии ${current.revision.number}"/>
                <echo message="Следующая ревизия: ${next.revision}"/>
                <exec executable="svn" output="${report.dir}/diff.txt">
                    <arg value="diff"/>
                    <arg value="-c"/>
                    <arg value="${next.revision}"/>
                </exec>
                <echo message="Diff сохранён в ${report.dir}/diff.txt"/>
            </then>
            <else>
                <echo message="Не удалось найти рабочую версию до самой первой ревизии"/>
                <exec executable="svn">
                    <arg value="update"/>
                    <arg value="-r"/>
                    <arg value="${original.revision.number}"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="alt" description="Создаёт альтернативную версию программы с измененными именами переменных и классов">
        <copy todir="${alt.dir}">
            <fileset dir="${src.dir}"/>
        </copy>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.MainBean"/>
            <substitution expression="org.example.weblab3.AltMainBean"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.ClockBean"/>
            <substitution expression="org.example.weblab3.AltClockBean"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.PointResult"/>
            <substitution expression="org.example.weblab3.AltPointResult"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.PointResultDAO"/>
            <substitution expression="org.example.weblab3.AltPointResultDAO"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="org\.example\.weblab3\.ResultManager"/>
            <substitution expression="org.example.weblab3.AltResultManager"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bx\b"/>
            <substitution expression="altX"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\by\b"/>
            <substitution expression="altY"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\br\b"/>
            <substitution expression="altR"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bresult\b"/>
            <substitution expression="altResult"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bpoint\b"/>
            <substitution expression="altPoint"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bclock\b"/>
            <substitution expression="altClock"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <replaceregexp flags="g">
            <regexp pattern="\bmanager\b"/>
            <substitution expression="altManager"/>
            <fileset dir="${alt.dir}" includes="**/*.java"/>
        </replaceregexp>
        <antcall target="build">
            <param name="src.dir" value="${alt.dir}"/>
            <param name="war.name" value="${alt.war.name}"/>
        </antcall>
    </target>

    <target name="diff" description="Проверка состояния рабочей копии и коммит изменений при наличии">
        <mkdir dir="${report.dir}"/>
        <exec executable="git" outputproperty="git.status">
            <arg value="status"/>
            <arg value="--porcelain"/>
        </exec>
        <exec executable="git" outputproperty="git.revision">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        <echo message="Текущая ревизия: ${git.revision}"/>
        <exec executable="git" output="${report.dir}/current-diff.txt">
            <arg value="diff"/>
        </exec>
        <condition property="changes.exist">
            <not>
                <equals arg1="${git.status}" arg2=""/>
            </not>
        </condition>
        <echo message="Статус изменений: ${git.status}"/>
        <if>
            <isset property="changes.exist"/>
            <then>
                <input message="Введите комментарий для коммита:" addproperty="commit.message"/>
                <exec executable="git">
                    <arg value="add"/>
                    <arg value="."/>
                </exec>
                <exec executable="git">
                    <arg value="commit"/>
                    <arg value="-m"/>
                    <arg value="${commit.message}"/>
                </exec>
                <echo message="Изменения успешно закоммичены."/>
            </then>
        </if>
    </target>

    <target name="env" depends="build" description="Сборка и запуск на локальном WildFly 27">
        <echo message="Копирование WAR в WildFly..."/>
        <copy file="${dist.dir}/${war.name}" todir="${wildfly.name}/standalone/deployments"/>
        <echo message="Запуск развертывания через jboss-cli..."/>
        <exec executable="${wildfly.name}/bin/jboss-cli.sh" failonerror="true">
            <arg value="--connect"/>
            <arg value="deployment=${dist.dir}/${war.name} --enable"/>
        </exec>
        <echo message="Запуск WildFly... (Ctrl+C для остановки)"/>
        <java fork="true" dir="${wildfly.name}/bin" classname="org.jboss.modules.Main" failonerror="true">
            <classpath>
                <pathelement path="${wildfly.name}/jboss-modules.jar"/>
            </classpath>
            <jvmarg value="-Djboss.server.base.dir=${wildfly.name}/standalone"/>
            <jvmarg value="-Djboss.home.dir=${wildfly.name}"/>
            <arg value="-mp"/>
            <arg value="${wildfly.name}/modules"/>
            <arg value="org.jboss.as.standalone"/>
            <arg value="--server-config=standalone.xml"/>
        </java>
        <echo message="Приложение доступно по адресу: http://localhost:8080/WebLab3"/>
    </target>

    <target name="team" description="Осуществляет получение из git-репозитория 4 предыдущих ревизий и их упаковку">
        <mkdir dir="${git.dir}"/>
        <copy todir="${git.dir}/.git">
            <fileset dir=".git"/>
        </copy>
        <exec executable="git" outputproperty="git.revisions" dir="${basedir}">
            <arg value="log"/>
            <arg value="-n"/>
            <arg value="4"/>
            <arg value="--format=%H"/>
        </exec>
        <echo message="Найдены ревизии: ${git.revisions}"/>
        <echo file="${git.dir}/revisions.txt">${git.revisions}</echo>
        <for list="${git.revisions}" param="revision" delimiter="${line.separator}">
            <sequential>
                <echo message="Обрабатываем ревизию: @{revision}"/>
                <mkdir dir="${git.dir}/rev-@{revision}"/>
                <exec executable="git" dir="${git.dir}/rev-@{revision}">
                    <arg value="init"/>
                </exec>
                <copy todir="${git.dir}/rev-@{revision}/.git">
                    <fileset dir="${git.dir}/.git"/>
                </copy>
                <exec executable="git" dir="${git.dir}/rev-@{revision}">
                    <arg value="checkout"/>
                    <arg value="@{revision}"/>
                    <arg value="--force"/>
                </exec>
                <ant dir="${git.dir}/rev-@{revision}" target="build" inheritAll="false">
                    <property name="dist.dir" value="${git.dir}/rev-@{revision}/dist"/>
                </ant>
            </sequential>
        </for>
        <mkdir dir="${dist.dir}"/>
        <zip destfile="${dist.dir}/${zip.name}">
            <fileset dir="${git.dir}" includes="**/dist/*.war"/>
        </zip>
        <echo message="Создан архив ${zip.name} с WAR-файлами из 4 последних ревизий"/>
    </target>
</project> 